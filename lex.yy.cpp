// lex.yy.cpp generated by reflex 1.6.5 from main.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               yyFlexLexer
#define REFLEX_OPTION_main                true
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_outfile             "lex.yy.cpp"
#define REFLEX_OPTION_prefix              yy
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define LambdaX (1)
#define LambdaArgX (2)
#define LambdaArgGuardX (3)
#define ListNX (4)
#define ListDX (5)
#define ListIX (6)
#define ListHX (7)
#define ListVX (8)
#define ListArgX (9)
#define YY_NUM_RULES (53)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE ABSTRACT LEXER CLASS                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/flexlexer.h>
typedef reflex::FlexLexer<reflex::Matcher> FlexLexer;

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class yyFlexLexer : public FlexLexer {
 public:
  yyFlexLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream        *os    = NULL)
    :
      FlexLexer(input, os)
  {
  }
  virtual int yylex();
  int yylex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return yylex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "main.l"
// C/C++ tokenizer (plain, no Unicode)


#include <stdio.h>
#include <ctype.h>
#include "stack.h"

/* `line` is like that: any number of blanks then"%include"
   then any number of blanks then filename until end of line.
 */
char * extract_filename(char * line) {
  while (isspace(*line)) line++;
  line += 8; /* "%include" length */
  while (isspace(*line)) line++;
  /* The newline is not stripped because it is still used to
     print out the filename on its line. */
  return line;
}

char * strip_last_n(char * str, int n) {
  int len = strlen(str);
  str[len - n] = 0;
  return str;
}

char * strip_first_n(char * str, int n) {
  str += n;
  return str;
}

int errcnt = 0;
void errmsg_at_loc(char * tok, int line, int col, char * reason) {
  errcnt++;
  fprintf(stderr, "*** ERROR: %s at (%d;%d): ", reason, line, col+1);
  fprintf(stderr, tok);
  fprintf(stderr, "\n");
}

#define ERRMSG(_msg) {\
  char msg[] = _msg;\
  errmsg_at_loc(yytext, yylineno, columno(), msg);}

enum flag {
  TestF = 1, IfF = 2, BlockF, NestF,
  ListNF, ListDF, ListIF, ListHF, ListVF, ListArgF,
};
struct StackNode * flag_states = 0;
void flag_push (enum flag f) { push(&flag_states, f); }
void flag_pop  ()            { pop(&flag_states); }
int  flag_peek ()            { return peek(flag_states); }
int  flag_none ()            { return isEmpty(flag_states); }
int  flag_is_on(enum flag f) {
  for (
    struct StackNode * cur = flag_states;
    !isEmpty(cur);
    cur = cur->next)
    if (f == peek(cur)) return 1;
  return 0;
}

#define FLAG_MATCH(f, pop_on_ok, ok_msg, err_msg)\
{\
  if (flag_is_on(f)) { if (pop_on_ok) flag_pop(); printf(ok_msg); }\
  else ERRMSG(err_msg);\
}


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);
extern void reflex_code_LambdaX(reflex::Matcher&);
extern void reflex_code_LambdaArgX(reflex::Matcher&);
extern void reflex_code_LambdaArgGuardX(reflex::Matcher&);
extern void reflex_code_ListNX(reflex::Matcher&);
extern void reflex_code_ListDX(reflex::Matcher&);
extern void reflex_code_ListIX(reflex::Matcher&);
extern void reflex_code_ListHX(reflex::Matcher&);
extern void reflex_code_ListVX(reflex::Matcher&);
extern void reflex_code_ListArgX(reflex::Matcher&);

int yyFlexLexer::yylex()
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  static const reflex::Pattern PATTERN_LambdaX(reflex_code_LambdaX);
  static const reflex::Pattern PATTERN_LambdaArgX(reflex_code_LambdaArgX);
  static const reflex::Pattern PATTERN_LambdaArgGuardX(reflex_code_LambdaArgGuardX);
  static const reflex::Pattern PATTERN_ListNX(reflex_code_ListNX);
  static const reflex::Pattern PATTERN_ListDX(reflex_code_ListDX);
  static const reflex::Pattern PATTERN_ListIX(reflex_code_ListIX);
  static const reflex::Pattern PATTERN_ListHX(reflex_code_ListHX);
  static const reflex::Pattern PATTERN_ListVX(reflex_code_ListVX);
  static const reflex::Pattern PATTERN_ListArgX(reflex_code_ListArgX);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    YY_USER_INIT
  }
  while (true)
  {
    switch (start())
    {
      case INITIAL:
        matcher().pattern(PATTERN_INITIAL);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
          case 1: // rule at line 79: \n
            YY_USER_ACTION
#line 79 "main.l"
printf("NewLine\n");
            YY_BREAK
          case 2: // rule at line 80: (?:[\x09-\x0d\x20\x5e]+)
            YY_USER_ACTION
#line 80 "main.l"


            YY_BREAK
          case 3: // rule at line 83: [\x5c]
            YY_USER_ACTION
#line 83 "main.l"
push_state(LambdaX), printf("Lambda\n");
            YY_BREAK
          case 4: // rule at line 102: (?:\Qif\E)
            YY_USER_ACTION
#line 102 "main.l"
flag_push(IfF), printf("IfBegin\n");
            YY_BREAK
          case 5: // rule at line 103: (?:\Qfi\E)
            YY_USER_ACTION
#line 103 "main.l"
FLAG_MATCH(
  IfF, 1, "IfEnd\n", "unexpected `fi` outside of `if` expresssion")
            YY_BREAK
          case 6: // rule at line 105: (?:\Q;\E)
            YY_USER_ACTION
#line 105 "main.l"
FLAG_MATCH(
  IfF, 0, "IfDivider\n", "unexpected `;` outside of `if` expresssion")
            YY_BREAK
          case 7: // rule at line 107: (?:\Q=>\E)
            YY_USER_ACTION
#line 107 "main.l"
FLAG_MATCH(
  IfF, 0, "IfArm\n", "unexpected `=>` outside of `if` expresssion")

            YY_BREAK
          case 8: // rule at line 110: (?:^[\x09\x20]*(?:\Q%include\E)[:aceps]*(?:.*)\n)
            YY_USER_ACTION
#line 110 "main.l"
printf("IncludeFile\t%s", extract_filename(yytext));
            YY_BREAK
          case 9: // rule at line 111: (?:(?:\Q%\E)(?:(?:[\x00-\x09]|[\x0b-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])|\\\n)*\n)
            YY_USER_ACTION
#line 111 "main.l"
            YY_BREAK
          case 10: // rule at line 112: (?:(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-/]|:|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-:]|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])*)(?:[\x09-\x0d\x20\x5e]+)?(?:\Q:=\E)
            YY_USER_ACTION
#line 112 "main.l"
printf("AssignTo\t%s\n", strip_last_n(yytext, 2));
            YY_BREAK
          case 11: // rule at line 113: (?:\Q:\E)
            YY_USER_ACTION
#line 113 "main.l"
printf("PairOperator\n");

            YY_BREAK
          case 12: // rule at line 115: (?:(?:`(?:[\x00-\x08]|[\x0e-\x1f]|[!-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf]))|(?:`\\[bfnr-tv]))
            YY_USER_ACTION
#line 115 "main.l"
printf("CharacterLit\t%s\n", strip_first_n(yytext, 1));
            YY_BREAK
          case 13: // rule at line 116: (?:(?:`[:aceps]?)|(?:`\\(?:[\x00-\x5b]|[\x5d-a]|[c-e]|[g-m]|[o-q]|u|[w-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])))
            YY_USER_ACTION
#line 116 "main.l"
ERRMSG("Invalid character literal");

            YY_BREAK
          case 14: // rule at line 118: (?:'(?:(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-/]|:|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-:]|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])*))
            YY_USER_ACTION
#line 118 "main.l"
printf("QuotedWordLit\t%s\n", strip_first_n(yytext, 1));
            YY_BREAK
          case 15: // rule at line 119: (?:'[:aceps]?)
            YY_USER_ACTION
#line 119 "main.l"
ERRMSG("Invalid word literal");

            YY_BREAK
          case 16: // rule at line 121: (?:0|[1-9][0-9]*)
            YY_USER_ACTION
#line 121 "main.l"
printf("IntegerLit\t%s\n", yytext);
            YY_BREAK
          case 17: // rule at line 122: (?:[0-9]*(?:[0-9]|\.[0-9]|[0-9]\.)[0-9]*)
            YY_USER_ACTION
#line 122 "main.l"
printf("FloatLit\t%s\n", yytext);
            YY_BREAK
          case 18: // rule at line 123: (?:"(?:\\(?:.[\x80-\xbf]*)|\r?\n|(?:[\x00-\x09]|[\x0b-!]|[\x23-\x5b]|[\x5d-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf]))*")
            YY_USER_ACTION
#line 123 "main.l"
{
  char * content = strip_last_n(strip_first_n(yytext, 1), 1);
  // count of bytes!
  int len = strlen(content);
  printf("StringLit\t%d\t%s\n", len, content); }

            YY_BREAK
          case 19: // rule at line 129: (?:\Q{\E)
            YY_USER_ACTION
#line 129 "main.l"
flag_push(BlockF), printf("BlockBegin\n");
            YY_BREAK
          case 20: // rule at line 130: (?:\Q}\E)
            YY_USER_ACTION
#line 130 "main.l"
FLAG_MATCH(BlockF, 1, "BlockEnd\n", "Mismatched `}`")

            YY_BREAK
          case 21: // rule at line 132: (?:\Q[\E)
            YY_USER_ACTION
#line 132 "main.l"
flag_push(NestF), printf("NestBegin\n");
            YY_BREAK
          case 22: // rule at line 133: (?:\Q]\E)
            YY_USER_ACTION
#line 133 "main.l"
FLAG_MATCH(NestF, 1, "NestEnd\n", "Mismatched `]`")

            YY_BREAK
          case 23: // rule at line 136: (?:\QT\E)
            YY_USER_ACTION
#line 136 "main.l"
printf("True\n");
            YY_BREAK
          case 24: // rule at line 137: (?:\QF\E)
            YY_USER_ACTION
#line 137 "main.l"
printf("False\n");
            YY_BREAK
          case 25: // rule at line 139: (?:\QN\E)
            YY_USER_ACTION
#line 139 "main.l"
push_state(ListNX);
            YY_BREAK
          case 26: // rule at line 140: (?:\QD\E)
            YY_USER_ACTION
#line 140 "main.l"
push_state(ListDX);
            YY_BREAK
          case 27: // rule at line 141: (?:\QI\E)
            YY_USER_ACTION
#line 141 "main.l"
push_state(ListIX);
            YY_BREAK
          case 28: // rule at line 142: (?:\QH\E)
            YY_USER_ACTION
#line 142 "main.l"
push_state(ListHX);
            YY_BREAK
          case 29: // rule at line 143: (?:\QV\E)
            YY_USER_ACTION
#line 143 "main.l"
push_state(ListVX);

            YY_BREAK
          case 30: // rule at line 150: (?:\Q(\E)
            YY_USER_ACTION
#line 150 "main.l"
flag_push(ListArgF), printf("ArgListBegin\n");

            YY_BREAK
          case 31: // rule at line 158: (?:\Q,\E)(?:[\x09-\x0d\x20\x5e]+)*
            YY_USER_ACTION
#line 158 "main.l"
{
  if ((flag_peek() <= ListArgF) && (flag_peek() >= ListNF))
    printf("ListDivider\n");
  else ERRMSG("Unexpected `,`") }
            YY_BREAK
          case 32: // rule at line 162: (?:\Q)\E)
            YY_USER_ACTION
#line 162 "main.l"
{
  switch (flag_peek()) {
  case ListNF:   flag_pop(); printf("NListEnd\n");   break;
  case ListDF:   flag_pop(); printf("DListEnd\n");   break;
  case ListIF:   flag_pop(); printf("IListEnd\n");   break;
  case ListHF:   flag_pop(); printf("HListEnd\n");   break;
  case ListVF:   flag_pop(); printf("VListEnd\n");   break;
  case ListArgF: flag_pop(); printf("ArgListEnd\n"); break;
  } }

            YY_BREAK
          case 33: // rule at line 172: (?:(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-/]|:|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-:]|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])*)
            YY_USER_ACTION
#line 172 "main.l"
printf("Identifier\t%s\n", yytext);
            YY_BREAK
          case 34: // rule at line 173: .
            YY_USER_ACTION
#line 173 "main.l"
printf("*** ERROR '%s' at line %d\n", yytext, yylineno);
            YY_BREAK
        }
        break;
      case LambdaX:
        matcher().pattern(PATTERN_LambdaX);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
          case 1: // rule at line 84: (?:(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-/]|:|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-:]|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])*)
            YY_USER_ACTION
#line 84 "main.l"
push_state(LambdaArgX), printf("LambdaArg\t%s", yytext);
            YY_BREAK
          case 2: // rule at line 95: (?:[\x09-\x0d\x20\x5e]+)?(?:\Q{\E)
            YY_USER_ACTION
#line 95 "main.l"
pop_state(), flag_push(BlockF), printf("BlockBegin\n");
            YY_BREAK
          case 3: // rule at line 96: (?:[\x09-\x0d\x20\x5e]+)
            YY_USER_ACTION
#line 96 "main.l"
            YY_BREAK
          case 4: // rule at line 97: .
            YY_USER_ACTION
#line 97 "main.l"
{
  char msg[] = "expected a name or a beginning of a block";
  errmsg_at_loc(yytext, yylineno, columno(), msg); }
            YY_BREAK
        }
        break;
      case LambdaArgX:
        matcher().pattern(PATTERN_LambdaArgX);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
          case 1: // rule at line 85: (?:(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-/]|:|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])(?:[\x00-\x08]|[\x0e-\x1f]|[!-']|[*+]|[\x2d-:]|[<-Z]|[\x5e_]|[a-z]|\x7c|[~\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xec][\x80-\xbf][\x80-\xbf]|\xed[\x80-\x9f][\x80-\xbf]|[\xee\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]|\xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf])*)
            YY_USER_ACTION
#line 85 "main.l"
printf("\t%s", yytext);
            YY_BREAK
          case 2: // rule at line 86: (?:[\x09-\x0d\x20\x5e]+)
            YY_USER_ACTION
#line 86 "main.l"
            YY_BREAK
          case 3: // rule at line 87: (?:[\x09-\x0d\x20\x5e]+)?(?:\Q,\E)
            YY_USER_ACTION
#line 87 "main.l"
pop_state(), printf("\n");
            YY_BREAK
          case 4: // rule at line 88: (?:[\x09-\x0d\x20\x5e]+)?(?:\Q{\E)
            YY_USER_ACTION
#line 88 "main.l"
{
  pop_state(); pop_state();
  flag_push(BlockF);
  printf("\nBlockBegin\n"); }
            YY_BREAK
          case 5: // rule at line 92: .
            YY_USER_ACTION
#line 92 "main.l"
{
  char msg[] = "expected a name or a comma in argument list";
  errmsg_at_loc(yytext, yylineno, columno(), msg); }
            YY_BREAK
        }
        break;
      case LambdaArgGuardX:
        matcher().pattern(PATTERN_LambdaArgGuardX);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
        }
        break;
      case ListNX:
        matcher().pattern(PATTERN_ListNX);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
          case 1: // rule at line 145: (?:\Q(\E)
            YY_USER_ACTION
#line 145 "main.l"
pop_state(), flag_push(ListNF), printf("NListBegin\n");
            YY_BREAK
          case 2: // rule at line 152: .
            YY_USER_ACTION
#line 152 "main.l"
pop_state(); printf("Nil\n");
            YY_BREAK
        }
        break;
      case ListDX:
        matcher().pattern(PATTERN_ListDX);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
          case 1: // rule at line 146: (?:\Q(\E)
            YY_USER_ACTION
#line 146 "main.l"
pop_state(), flag_push(ListDF), printf("DListBegin\n");
            YY_BREAK
          case 2: // rule at line 153: .
            YY_USER_ACTION
#line 153 "main.l"
pop_state(); ERRMSG("Expected a list after `D`")
            YY_BREAK
        }
        break;
      case ListIX:
        matcher().pattern(PATTERN_ListIX);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
          case 1: // rule at line 147: (?:\Q(\E)
            YY_USER_ACTION
#line 147 "main.l"
pop_state(), flag_push(ListIF), printf("IListBegin\n");
            YY_BREAK
          case 2: // rule at line 154: .
            YY_USER_ACTION
#line 154 "main.l"
pop_state(); ERRMSG("Expected a list after `I`")
            YY_BREAK
        }
        break;
      case ListHX:
        matcher().pattern(PATTERN_ListHX);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
          case 1: // rule at line 148: (?:\Q(\E)
            YY_USER_ACTION
#line 148 "main.l"
pop_state(), flag_push(ListHF), printf("HListBegin\n");
            YY_BREAK
          case 2: // rule at line 155: .
            YY_USER_ACTION
#line 155 "main.l"
pop_state(); ERRMSG("Expected a list after `H`")
            YY_BREAK
        }
        break;
      case ListVX:
        matcher().pattern(PATTERN_ListVX);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
          case 1: // rule at line 149: (?:\Q(\E)
            YY_USER_ACTION
#line 149 "main.l"
pop_state(), flag_push(ListVF), printf("VListBegin\n");
            YY_BREAK
          case 2: // rule at line 156: .
            YY_USER_ACTION
#line 156 "main.l"
pop_state(); ERRMSG("Expected a list after `V`")

            YY_BREAK
        }
        break;
      case ListArgX:
        matcher().pattern(PATTERN_ListArgX);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              LexerError("scanner jammed");
              yyterminate();
            }
            YY_BREAK
        }
        break;
      default:
        start(0);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: main                                                           //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int main()
{
  return yyFlexLexer().yylex();
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S183;
  if (241 <= c1 && c1 <= 243) goto S180;
  if (c1 == 240) goto S177;
  if (238 <= c1 && c1 <= 239) goto S174;
  if (c1 == 237) goto S171;
  if (225 <= c1 && c1 <= 236) goto S168;
  if (c1 == 224) goto S165;
  if (194 <= c1 && c1 <= 223) goto S162;
  if (128 <= c1) goto S461;
  if (c1 == '}') goto S299;
  if (c1 == '{') goto S297;
  if (c1 == 'i') goto S49;
  if (c1 == 'f') goto S71;
  if (c1 == '`') goto S207;
  if (c1 == '^') goto S463;
  if (c1 == ']') goto S303;
  if (c1 == '\\') goto S47;
  if (c1 == '[') goto S301;
  if (c1 == 'V') goto S431;
  if (c1 == 'T') goto S305;
  if (c1 == 'N') goto S347;
  if (c1 == 'I') goto S389;
  if (c1 == 'H') goto S410;
  if (c1 == 'F') goto S326;
  if (c1 == 'D') goto S368;
  if (c1 == '=') goto S95;
  if (c1 == ';') goto S93;
  if (c1 == ':') goto S186;
  if ('1' <= c1 && c1 <= '9') goto S247;
  if (c1 == '0') goto S243;
  if (c1 == '.') goto S251;
  if (c1 == ',') goto S454;
  if (c1 == ')') goto S459;
  if (c1 == '(') goto S452;
  if (c1 == '\'') goto S221;
  if (c1 == '%') goto S117;
  if (c1 == '"') goto S273;
  if (c1 == ' ') goto S490;
  if ('\v' <= c1 && c1 <= '\r') goto S485;
  if (c1 == '\n') goto S42;
  if (c1 == '\t') goto S490;
  if (0 <= c1 && c1 <= 127) goto S141;
  return m.FSM_HALT(c1);

S42:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == '^') goto S485;
  if (c1 == ' ') goto S485;
  if ('\t' <= c1 && c1 <= '\r') goto S485;
  return m.FSM_HALT(c1);

S47:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S49:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if (c1 == 'f') goto S497;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S71:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if (c1 == 'i') goto S561;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S93:
  m.FSM_TAKE(6);
  return m.FSM_HALT();

S95:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if (c1 == '>') goto S582;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S117:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == 'i') goto S603;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S141:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S162:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S165:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S736;
  return m.FSM_HALT(c1);

S168:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S738;
  return m.FSM_HALT(c1);

S171:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S740;
  return m.FSM_HALT(c1);

S174:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S742;
  return m.FSM_HALT(c1);

S177:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S744;
  return m.FSM_HALT(c1);

S180:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S746;
  return m.FSM_HALT(c1);

S183:
  m.FSM_TAKE(34);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S748;
  return m.FSM_HALT(c1);

S186:
  m.FSM_TAKE(11);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S207:
  m.FSM_TAKE(13);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S766;
  if (241 <= c1 && c1 <= 243) goto S764;
  if (c1 == 240) goto S762;
  if (238 <= c1 && c1 <= 239) goto S760;
  if (c1 == 237) goto S758;
  if (225 <= c1 && c1 <= 236) goto S756;
  if (c1 == 224) goto S754;
  if (194 <= c1 && c1 <= 223) goto S752;
  if (c1 == '\\') goto S768;
  if ('!' <= c1 && c1 <= 127) goto S750;
  if (14 <= c1 && c1 <= 31) goto S750;
  if ('\t' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\b') goto S750;
  return m.FSM_HALT(c1);

S221:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S842;
  if (241 <= c1 && c1 <= 243) goto S840;
  if (c1 == 240) goto S838;
  if (238 <= c1 && c1 <= 239) goto S836;
  if (c1 == 237) goto S834;
  if (225 <= c1 && c1 <= 236) goto S832;
  if (c1 == 224) goto S830;
  if (194 <= c1 && c1 <= 223) goto S828;
  if ('~' <= c1 && c1 <= 127) goto S807;
  if (c1 == '|') goto S807;
  if ('a' <= c1 && c1 <= 'z') goto S807;
  if ('^' <= c1 && c1 <= '_') goto S807;
  if ('<' <= c1 && c1 <= 'Z') goto S807;
  if (c1 == ':') goto S785;
  if ('0' <= c1 && c1 <= '9') goto S141;
  if ('-' <= c1 && c1 <= '/') goto S807;
  if ('*' <= c1 && c1 <= '+') goto S807;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S807;
  return m.FSM_HALT(c1);

S243:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S844;
  if (c1 == '.') goto S848;
  return m.FSM_HALT(c1);

S247:
  m.FSM_TAKE(16);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S247;
  if (c1 == '.') goto S848;
  return m.FSM_HALT(c1);

S251:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('0' <= c1 && c1 <= '9') goto S851;
  if ('-' <= c1 && c1 <= '/') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S273:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S933;
  if (241 <= c1 && c1 <= 243) goto S931;
  if (c1 == 240) goto S929;
  if (238 <= c1 && c1 <= 239) goto S927;
  if (c1 == 237) goto S925;
  if (225 <= c1 && c1 <= 236) goto S923;
  if (c1 == 224) goto S921;
  if (194 <= c1 && c1 <= 223) goto S919;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S972;
  if (c1 == '{') goto S972;
  if (c1 == '`') goto S972;
  if (c1 == '\\') goto S952;
  if ('[' <= c1 && c1 <= ']') goto S972;
  if (c1 == ';') goto S972;
  if (c1 == ':') goto S873;
  if (c1 == ',') goto S972;
  if ('(' <= c1 && c1 <= ')') goto S972;
  if (c1 == '"') goto S898;
  if (c1 == ' ') goto S935;
  if (c1 == '\r') goto S955;
  if ('\t' <= c1 && c1 <= '\f') goto S935;
  if (0 <= c1 && c1 <= 127) goto S273;
  return m.FSM_HALT(c1);

S297:
  m.FSM_TAKE(19);
  return m.FSM_HALT();

S299:
  m.FSM_TAKE(20);
  return m.FSM_HALT();

S301:
  m.FSM_TAKE(21);
  return m.FSM_HALT();

S303:
  m.FSM_TAKE(22);
  return m.FSM_HALT();

S305:
  m.FSM_TAKE(23);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S326:
  m.FSM_TAKE(24);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S347:
  m.FSM_TAKE(25);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S368:
  m.FSM_TAKE(26);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S389:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S410:
  m.FSM_TAKE(28);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S431:
  m.FSM_TAKE(29);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S452:
  m.FSM_TAKE(30);
  return m.FSM_HALT();

S454:
  m.FSM_TAKE(31);
  c1 = m.FSM_CHAR();
  if (c1 == '^') goto S454;
  if (c1 == ' ') goto S454;
  if ('\t' <= c1 && c1 <= '\r') goto S454;
  return m.FSM_HALT(c1);

S459:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S461:
  m.FSM_TAKE(34);
  return m.FSM_HALT();

S463:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if (c1 == '_') goto S141;
  if (c1 == '^') goto S463;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S985;
  if ('\t' <= c1 && c1 <= '\r') goto S985;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S485:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == '^') goto S485;
  if (c1 == ' ') goto S485;
  if ('\t' <= c1 && c1 <= '\r') goto S485;
  return m.FSM_HALT(c1);

S490:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == '^') goto S485;
  if (c1 == '%') goto S991;
  if (c1 == ' ') goto S490;
  if ('\n' <= c1 && c1 <= '\r') goto S485;
  if (c1 == '\t') goto S490;
  return m.FSM_HALT(c1);

S497:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S518:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if (c1 == '=') goto S993;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S540:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S542:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1014;
  return m.FSM_HALT(c1);

S544:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1016;
  return m.FSM_HALT(c1);

S546:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1018;
  return m.FSM_HALT(c1);

S548:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1020;
  return m.FSM_HALT(c1);

S550:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1022;
  return m.FSM_HALT(c1);

S552:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1024;
  return m.FSM_HALT(c1);

S554:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1026;
  return m.FSM_HALT(c1);

S556:
  c1 = m.FSM_CHAR();
  if (c1 == '^') goto S556;
  if (c1 == ':') goto S1028;
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  return m.FSM_HALT(c1);

S561:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S582:
  m.FSM_TAKE(7);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S603:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == 'n') goto S1030;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S627:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if (c1 == '^') goto S556;
  if (c1 == ':') goto S1028;
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  return m.FSM_HALT(c1);

S633:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == '=') goto S1054;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S657:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1093;
  if (241 <= c1 && c1 <= 243) goto S1091;
  if (c1 == 240) goto S1089;
  if (238 <= c1 && c1 <= 239) goto S1087;
  if (c1 == 237) goto S1085;
  if (225 <= c1 && c1 <= 236) goto S1083;
  if (c1 == 224) goto S1081;
  if (194 <= c1 && c1 <= 223) goto S1079;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S685;
  if (c1 == '\n') goto S1077;
  if (0 <= c1 && c1 <= 127) goto S657;
  return m.FSM_HALT(c1);

S669:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S697;
  return m.FSM_HALT(c1);

S671:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1095;
  return m.FSM_HALT(c1);

S673:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1097;
  return m.FSM_HALT(c1);

S675:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1099;
  return m.FSM_HALT(c1);

S677:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1101;
  return m.FSM_HALT(c1);

S679:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1103;
  return m.FSM_HALT(c1);

S681:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1105;
  return m.FSM_HALT(c1);

S683:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1107;
  return m.FSM_HALT(c1);

S685:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1093;
  if (241 <= c1 && c1 <= 243) goto S1091;
  if (c1 == 240) goto S1089;
  if (238 <= c1 && c1 <= 239) goto S1087;
  if (c1 == 237) goto S1085;
  if (225 <= c1 && c1 <= 236) goto S1083;
  if (c1 == 224) goto S1081;
  if (194 <= c1 && c1 <= 223) goto S1079;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S685;
  if (c1 == '\n') goto S1109;
  if (0 <= c1 && c1 <= 127) goto S657;
  return m.FSM_HALT(c1);

S697:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S720:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1093;
  if (241 <= c1 && c1 <= 243) goto S1091;
  if (c1 == 240) goto S1089;
  if (238 <= c1 && c1 <= 239) goto S1087;
  if (c1 == 237) goto S1085;
  if (225 <= c1 && c1 <= 236) goto S1083;
  if (c1 == 224) goto S1081;
  if (194 <= c1 && c1 <= 223) goto S1079;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '^') goto S720;
  if (c1 == '\\') goto S685;
  if (c1 == ':') goto S1122;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S657;
  return m.FSM_HALT(c1);

S736:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S738:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S740:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S742:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S744:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1135;
  return m.FSM_HALT(c1);

S746:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1137;
  return m.FSM_HALT(c1);

S748:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1139;
  return m.FSM_HALT(c1);

S750:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S752:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S750;
  return m.FSM_HALT(c1);

S754:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1141;
  return m.FSM_HALT(c1);

S756:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1143;
  return m.FSM_HALT(c1);

S758:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1145;
  return m.FSM_HALT(c1);

S760:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1147;
  return m.FSM_HALT(c1);

S762:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1149;
  return m.FSM_HALT(c1);

S764:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1151;
  return m.FSM_HALT(c1);

S766:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1153;
  return m.FSM_HALT(c1);

S768:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1171;
  if (241 <= c1 && c1 <= 243) goto S1169;
  if (c1 == 240) goto S1167;
  if (238 <= c1 && c1 <= 239) goto S1165;
  if (c1 == 237) goto S1163;
  if (225 <= c1 && c1 <= 236) goto S1161;
  if (c1 == 224) goto S1159;
  if (194 <= c1 && c1 <= 223) goto S1157;
  if (c1 == 'v') goto S750;
  if ('r' <= c1 && c1 <= 't') goto S750;
  if (c1 == 'n') goto S750;
  if (c1 == 'f') goto S750;
  if (c1 == 'b') goto S750;
  if (']' <= c1 && c1 <= 127) goto S1155;
  if ('\\' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '[') goto S1155;
  return m.FSM_HALT(c1);

S785:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1208;
  if (241 <= c1 && c1 <= 243) goto S1206;
  if (c1 == 240) goto S1204;
  if (238 <= c1 && c1 <= 239) goto S1202;
  if (c1 == 237) goto S1200;
  if (225 <= c1 && c1 <= 236) goto S1198;
  if (c1 == 224) goto S1196;
  if (194 <= c1 && c1 <= 223) goto S1194;
  if ('~' <= c1 && c1 <= 127) goto S807;
  if (c1 == '|') goto S807;
  if ('a' <= c1 && c1 <= 'z') goto S807;
  if ('^' <= c1 && c1 <= '_') goto S807;
  if (c1 == '=') goto S1173;
  if ('<' <= c1 && c1 <= 'Z') goto S807;
  if (c1 == ':') goto S785;
  if ('-' <= c1 && c1 <= '9') goto S807;
  if ('*' <= c1 && c1 <= '+') goto S807;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S807;
  return m.FSM_HALT(c1);

S807:
  m.FSM_TAKE(14);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1208;
  if (241 <= c1 && c1 <= 243) goto S1206;
  if (c1 == 240) goto S1204;
  if (238 <= c1 && c1 <= 239) goto S1202;
  if (c1 == 237) goto S1200;
  if (225 <= c1 && c1 <= 236) goto S1198;
  if (c1 == 224) goto S1196;
  if (194 <= c1 && c1 <= 223) goto S1194;
  if ('~' <= c1 && c1 <= 127) goto S807;
  if (c1 == '|') goto S807;
  if ('a' <= c1 && c1 <= 'z') goto S807;
  if ('^' <= c1 && c1 <= '_') goto S807;
  if ('<' <= c1 && c1 <= 'Z') goto S807;
  if (c1 == ':') goto S785;
  if ('-' <= c1 && c1 <= '9') goto S807;
  if ('*' <= c1 && c1 <= '+') goto S807;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S807;
  return m.FSM_HALT(c1);

S828:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S830:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1210;
  return m.FSM_HALT(c1);

S832:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1212;
  return m.FSM_HALT(c1);

S834:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1214;
  return m.FSM_HALT(c1);

S836:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1216;
  return m.FSM_HALT(c1);

S838:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1218;
  return m.FSM_HALT(c1);

S840:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1220;
  return m.FSM_HALT(c1);

S842:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1222;
  return m.FSM_HALT(c1);

S844:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S844;
  if (c1 == '.') goto S848;
  return m.FSM_HALT(c1);

S848:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S1224;
  return m.FSM_HALT(c1);

S851:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('0' <= c1 && c1 <= '9') goto S851;
  if ('-' <= c1 && c1 <= '/') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S873:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S933;
  if (241 <= c1 && c1 <= 243) goto S931;
  if (c1 == 240) goto S929;
  if (238 <= c1 && c1 <= 239) goto S927;
  if (c1 == 237) goto S925;
  if (225 <= c1 && c1 <= 236) goto S923;
  if (c1 == 224) goto S921;
  if (194 <= c1 && c1 <= 223) goto S919;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S972;
  if (c1 == '{') goto S972;
  if (c1 == '`') goto S972;
  if (c1 == '\\') goto S952;
  if ('[' <= c1 && c1 <= ']') goto S972;
  if (c1 == '=') goto S1227;
  if (c1 == ';') goto S972;
  if (c1 == ':') goto S873;
  if (c1 == ',') goto S972;
  if ('(' <= c1 && c1 <= ')') goto S972;
  if (c1 == '"') goto S898;
  if (c1 == ' ') goto S935;
  if (c1 == '\r') goto S955;
  if ('\t' <= c1 && c1 <= '\f') goto S935;
  if (0 <= c1 && c1 <= 127) goto S273;
  return m.FSM_HALT(c1);

S898:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S919:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S273;
  return m.FSM_HALT(c1);

S921:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1251;
  return m.FSM_HALT(c1);

S923:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1253;
  return m.FSM_HALT(c1);

S925:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1255;
  return m.FSM_HALT(c1);

S927:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1257;
  return m.FSM_HALT(c1);

S929:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1259;
  return m.FSM_HALT(c1);

S931:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1261;
  return m.FSM_HALT(c1);

S933:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1263;
  return m.FSM_HALT(c1);

S935:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1295;
  if (241 <= c1 && c1 <= 243) goto S1293;
  if (c1 == 240) goto S1291;
  if (238 <= c1 && c1 <= 239) goto S1289;
  if (c1 == 237) goto S1287;
  if (225 <= c1 && c1 <= 236) goto S1285;
  if (c1 == 224) goto S1283;
  if (194 <= c1 && c1 <= 223) goto S1281;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '^') goto S935;
  if (c1 == '\\') goto S952;
  if (c1 == ':') goto S1265;
  if (c1 == '"') goto S1279;
  if (c1 == ' ') goto S935;
  if (c1 == '\r') goto S955;
  if ('\t' <= c1 && c1 <= '\f') goto S935;
  if (0 <= c1 && c1 <= 127) goto S972;
  return m.FSM_HALT(c1);

S952:
  c1 = m.FSM_CHAR();
  if ('\v' <= c1) goto S1297;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S1297;
  return m.FSM_HALT(c1);

S955:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1295;
  if (241 <= c1 && c1 <= 243) goto S1293;
  if (c1 == 240) goto S1291;
  if (238 <= c1 && c1 <= 239) goto S1289;
  if (c1 == 237) goto S1287;
  if (225 <= c1 && c1 <= 236) goto S1285;
  if (c1 == 224) goto S1283;
  if (194 <= c1 && c1 <= 223) goto S1281;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '^') goto S935;
  if (c1 == '\\') goto S952;
  if (c1 == ':') goto S1265;
  if (c1 == '"') goto S1279;
  if (c1 == ' ') goto S935;
  if (c1 == '\r') goto S955;
  if ('\t' <= c1 && c1 <= '\f') goto S935;
  if (0 <= c1 && c1 <= 127) goto S972;
  return m.FSM_HALT(c1);

S972:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1295;
  if (241 <= c1 && c1 <= 243) goto S1293;
  if (c1 == 240) goto S1291;
  if (238 <= c1 && c1 <= 239) goto S1289;
  if (c1 == 237) goto S1287;
  if (225 <= c1 && c1 <= 236) goto S1285;
  if (c1 == 224) goto S1283;
  if (194 <= c1 && c1 <= 223) goto S1281;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S952;
  if (c1 == '"') goto S1279;
  if (c1 == '\r') goto S1311;
  if (0 <= c1 && c1 <= 127) goto S972;
  return m.FSM_HALT(c1);

S985:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == '^') goto S985;
  if (c1 == ':') goto S1028;
  if (c1 == ' ') goto S985;
  if ('\t' <= c1 && c1 <= '\r') goto S985;
  return m.FSM_HALT(c1);

S991:
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S1324;
  return m.FSM_HALT(c1);

S993:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S554;
  if (241 <= c1 && c1 <= 243) goto S552;
  if (c1 == 240) goto S550;
  if (238 <= c1 && c1 <= 239) goto S548;
  if (c1 == 237) goto S546;
  if (225 <= c1 && c1 <= 236) goto S544;
  if (c1 == 224) goto S542;
  if (194 <= c1 && c1 <= 223) goto S540;
  if ('~' <= c1 && c1 <= 127) goto S141;
  if (c1 == '|') goto S141;
  if ('a' <= c1 && c1 <= 'z') goto S141;
  if ('^' <= c1 && c1 <= '_') goto S141;
  if ('<' <= c1 && c1 <= 'Z') goto S141;
  if (c1 == ':') goto S518;
  if ('-' <= c1 && c1 <= '9') goto S141;
  if ('*' <= c1 && c1 <= '+') goto S141;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S141;
  return m.FSM_HALT(c1);

S1014:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1016:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1018:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1020:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1022:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1326;
  return m.FSM_HALT(c1);

S1024:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1328;
  return m.FSM_HALT(c1);

S1026:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1330;
  return m.FSM_HALT(c1);

S1028:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S1332;
  return m.FSM_HALT(c1);

S1030:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == 'c') goto S1334;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S1054:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S1077:
  m.FSM_TAKE(9);
  return m.FSM_HALT();

S1079:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S657;
  return m.FSM_HALT(c1);

S1081:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1358;
  return m.FSM_HALT(c1);

S1083:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1360;
  return m.FSM_HALT(c1);

S1085:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1362;
  return m.FSM_HALT(c1);

S1087:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1364;
  return m.FSM_HALT(c1);

S1089:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1366;
  return m.FSM_HALT(c1);

S1091:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1368;
  return m.FSM_HALT(c1);

S1093:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1370;
  return m.FSM_HALT(c1);

S1095:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S697;
  return m.FSM_HALT(c1);

S1097:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S697;
  return m.FSM_HALT(c1);

S1099:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S697;
  return m.FSM_HALT(c1);

S1101:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S697;
  return m.FSM_HALT(c1);

S1103:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1372;
  return m.FSM_HALT(c1);

S1105:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1374;
  return m.FSM_HALT(c1);

S1107:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1376;
  return m.FSM_HALT(c1);

S1109:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1093;
  if (241 <= c1 && c1 <= 243) goto S1091;
  if (c1 == 240) goto S1089;
  if (238 <= c1 && c1 <= 239) goto S1087;
  if (c1 == 237) goto S1085;
  if (225 <= c1 && c1 <= 236) goto S1083;
  if (c1 == 224) goto S1081;
  if (194 <= c1 && c1 <= 223) goto S1079;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S685;
  if (c1 == '\n') goto S1077;
  if (0 <= c1 && c1 <= 127) goto S657;
  return m.FSM_HALT(c1);

S1122:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1093;
  if (241 <= c1 && c1 <= 243) goto S1091;
  if (c1 == 240) goto S1089;
  if (238 <= c1 && c1 <= 239) goto S1087;
  if (c1 == 237) goto S1085;
  if (225 <= c1 && c1 <= 236) goto S1083;
  if (c1 == 224) goto S1081;
  if (194 <= c1 && c1 <= 223) goto S1079;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S685;
  if (c1 == '=') goto S1378;
  if (c1 == '\n') goto S1077;
  if (0 <= c1 && c1 <= 127) goto S657;
  return m.FSM_HALT(c1);

S1135:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1137:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1139:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1141:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S750;
  return m.FSM_HALT(c1);

S1143:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S750;
  return m.FSM_HALT(c1);

S1145:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S750;
  return m.FSM_HALT(c1);

S1147:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S750;
  return m.FSM_HALT(c1);

S1149:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1391;
  return m.FSM_HALT(c1);

S1151:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1393;
  return m.FSM_HALT(c1);

S1153:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1395;
  return m.FSM_HALT(c1);

S1155:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S1157:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1155;
  return m.FSM_HALT(c1);

S1159:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1397;
  return m.FSM_HALT(c1);

S1161:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1399;
  return m.FSM_HALT(c1);

S1163:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1401;
  return m.FSM_HALT(c1);

S1165:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1403;
  return m.FSM_HALT(c1);

S1167:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1405;
  return m.FSM_HALT(c1);

S1169:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1407;
  return m.FSM_HALT(c1);

S1171:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1409;
  return m.FSM_HALT(c1);

S1173:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1208;
  if (241 <= c1 && c1 <= 243) goto S1206;
  if (c1 == 240) goto S1204;
  if (238 <= c1 && c1 <= 239) goto S1202;
  if (c1 == 237) goto S1200;
  if (225 <= c1 && c1 <= 236) goto S1198;
  if (c1 == 224) goto S1196;
  if (194 <= c1 && c1 <= 223) goto S1194;
  if ('~' <= c1 && c1 <= 127) goto S807;
  if (c1 == '|') goto S807;
  if ('a' <= c1 && c1 <= 'z') goto S807;
  if ('^' <= c1 && c1 <= '_') goto S807;
  if ('<' <= c1 && c1 <= 'Z') goto S807;
  if (c1 == ':') goto S785;
  if ('-' <= c1 && c1 <= '9') goto S807;
  if ('*' <= c1 && c1 <= '+') goto S807;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  if (0 <= c1 && c1 <= '\'') goto S807;
  return m.FSM_HALT(c1);

S1194:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1196:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1411;
  return m.FSM_HALT(c1);

S1198:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1413;
  return m.FSM_HALT(c1);

S1200:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1415;
  return m.FSM_HALT(c1);

S1202:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1417;
  return m.FSM_HALT(c1);

S1204:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1419;
  return m.FSM_HALT(c1);

S1206:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1421;
  return m.FSM_HALT(c1);

S1208:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1423;
  return m.FSM_HALT(c1);

S1210:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1212:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1214:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1216:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1218:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1425;
  return m.FSM_HALT(c1);

S1220:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1427;
  return m.FSM_HALT(c1);

S1222:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1429;
  return m.FSM_HALT(c1);

S1224:
  m.FSM_TAKE(17);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S1224;
  return m.FSM_HALT(c1);

S1227:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S933;
  if (241 <= c1 && c1 <= 243) goto S931;
  if (c1 == 240) goto S929;
  if (238 <= c1 && c1 <= 239) goto S927;
  if (c1 == 237) goto S925;
  if (225 <= c1 && c1 <= 236) goto S923;
  if (c1 == 224) goto S921;
  if (194 <= c1 && c1 <= 223) goto S919;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S972;
  if (c1 == '{') goto S972;
  if (c1 == '`') goto S972;
  if (c1 == '\\') goto S952;
  if ('[' <= c1 && c1 <= ']') goto S972;
  if (c1 == ';') goto S972;
  if (c1 == ':') goto S873;
  if (c1 == ',') goto S972;
  if ('(' <= c1 && c1 <= ')') goto S972;
  if (c1 == '"') goto S898;
  if (c1 == ' ') goto S935;
  if (c1 == '\r') goto S955;
  if ('\t' <= c1 && c1 <= '\f') goto S935;
  if (0 <= c1 && c1 <= 127) goto S273;
  return m.FSM_HALT(c1);

S1251:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S273;
  return m.FSM_HALT(c1);

S1253:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S273;
  return m.FSM_HALT(c1);

S1255:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S273;
  return m.FSM_HALT(c1);

S1257:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S273;
  return m.FSM_HALT(c1);

S1259:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1431;
  return m.FSM_HALT(c1);

S1261:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1433;
  return m.FSM_HALT(c1);

S1263:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1435;
  return m.FSM_HALT(c1);

S1265:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1295;
  if (241 <= c1 && c1 <= 243) goto S1293;
  if (c1 == 240) goto S1291;
  if (238 <= c1 && c1 <= 239) goto S1289;
  if (c1 == 237) goto S1287;
  if (225 <= c1 && c1 <= 236) goto S1285;
  if (c1 == 224) goto S1283;
  if (194 <= c1 && c1 <= 223) goto S1281;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S952;
  if (c1 == '=') goto S1437;
  if (c1 == '"') goto S1279;
  if (c1 == '\r') goto S1311;
  if (0 <= c1 && c1 <= 127) goto S972;
  return m.FSM_HALT(c1);

S1279:
  m.FSM_TAKE(18);
  return m.FSM_HALT();

S1281:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S972;
  return m.FSM_HALT(c1);

S1283:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1451;
  return m.FSM_HALT(c1);

S1285:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1453;
  return m.FSM_HALT(c1);

S1287:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1455;
  return m.FSM_HALT(c1);

S1289:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1457;
  return m.FSM_HALT(c1);

S1291:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1459;
  return m.FSM_HALT(c1);

S1293:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1461;
  return m.FSM_HALT(c1);

S1295:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1463;
  return m.FSM_HALT(c1);

S1297:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1295;
  if (241 <= c1 && c1 <= 243) goto S1293;
  if (c1 == 240) goto S1291;
  if (238 <= c1 && c1 <= 239) goto S1289;
  if (c1 == 237) goto S1287;
  if (225 <= c1 && c1 <= 236) goto S1285;
  if (c1 == 224) goto S1283;
  if (194 <= c1 && c1 <= 223) goto S1281;
  if (192 <= c1) return m.FSM_HALT(c1);
  if (128 <= c1 && c1 <= 191) goto S1297;
  if (c1 == '\\') goto S952;
  if (c1 == '"') goto S1279;
  if (c1 == '\r') goto S1311;
  if (0 <= c1 && c1 <= 127) goto S972;
  return m.FSM_HALT(c1);

S1311:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1295;
  if (241 <= c1 && c1 <= 243) goto S1293;
  if (c1 == 240) goto S1291;
  if (238 <= c1 && c1 <= 239) goto S1289;
  if (c1 == 237) goto S1287;
  if (225 <= c1 && c1 <= 236) goto S1285;
  if (c1 == 224) goto S1283;
  if (194 <= c1 && c1 <= 223) goto S1281;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S952;
  if (c1 == '"') goto S1279;
  if (c1 == '\r') goto S1311;
  if (0 <= c1 && c1 <= 127) goto S972;
  return m.FSM_HALT(c1);

S1324:
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S1465;
  return m.FSM_HALT(c1);

S1326:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1328:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1330:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S141;
  return m.FSM_HALT(c1);

S1332:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S1334:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == 'l') goto S1467;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S1358:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S657;
  return m.FSM_HALT(c1);

S1360:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S657;
  return m.FSM_HALT(c1);

S1362:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S657;
  return m.FSM_HALT(c1);

S1364:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S657;
  return m.FSM_HALT(c1);

S1366:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1491;
  return m.FSM_HALT(c1);

S1368:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1493;
  return m.FSM_HALT(c1);

S1370:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1495;
  return m.FSM_HALT(c1);

S1372:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S697;
  return m.FSM_HALT(c1);

S1374:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S697;
  return m.FSM_HALT(c1);

S1376:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S697;
  return m.FSM_HALT(c1);

S1378:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1093;
  if (241 <= c1 && c1 <= 243) goto S1091;
  if (c1 == 240) goto S1089;
  if (238 <= c1 && c1 <= 239) goto S1087;
  if (c1 == 237) goto S1085;
  if (225 <= c1 && c1 <= 236) goto S1083;
  if (c1 == 224) goto S1081;
  if (194 <= c1 && c1 <= 223) goto S1079;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S685;
  if (c1 == '\n') goto S1077;
  if (0 <= c1 && c1 <= 127) goto S657;
  return m.FSM_HALT(c1);

S1391:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S750;
  return m.FSM_HALT(c1);

S1393:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S750;
  return m.FSM_HALT(c1);

S1395:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S750;
  return m.FSM_HALT(c1);

S1397:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1155;
  return m.FSM_HALT(c1);

S1399:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1155;
  return m.FSM_HALT(c1);

S1401:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1155;
  return m.FSM_HALT(c1);

S1403:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1155;
  return m.FSM_HALT(c1);

S1405:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1497;
  return m.FSM_HALT(c1);

S1407:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1499;
  return m.FSM_HALT(c1);

S1409:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1501;
  return m.FSM_HALT(c1);

S1411:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1413:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1415:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1417:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1419:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1503;
  return m.FSM_HALT(c1);

S1421:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1505;
  return m.FSM_HALT(c1);

S1423:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1507;
  return m.FSM_HALT(c1);

S1425:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1427:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1429:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1431:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S273;
  return m.FSM_HALT(c1);

S1433:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S273;
  return m.FSM_HALT(c1);

S1435:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S273;
  return m.FSM_HALT(c1);

S1437:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1295;
  if (241 <= c1 && c1 <= 243) goto S1293;
  if (c1 == 240) goto S1291;
  if (238 <= c1 && c1 <= 239) goto S1289;
  if (c1 == 237) goto S1287;
  if (225 <= c1 && c1 <= 236) goto S1285;
  if (c1 == 224) goto S1283;
  if (194 <= c1 && c1 <= 223) goto S1281;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S952;
  if (c1 == '"') goto S1279;
  if (c1 == '\r') goto S1311;
  if (0 <= c1 && c1 <= 127) goto S972;
  return m.FSM_HALT(c1);

S1451:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S972;
  return m.FSM_HALT(c1);

S1453:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S972;
  return m.FSM_HALT(c1);

S1455:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S972;
  return m.FSM_HALT(c1);

S1457:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S972;
  return m.FSM_HALT(c1);

S1459:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1509;
  return m.FSM_HALT(c1);

S1461:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1511;
  return m.FSM_HALT(c1);

S1463:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1513;
  return m.FSM_HALT(c1);

S1465:
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S1515;
  return m.FSM_HALT(c1);

S1467:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == 'u') goto S1517;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S1491:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S657;
  return m.FSM_HALT(c1);

S1493:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S657;
  return m.FSM_HALT(c1);

S1495:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S657;
  return m.FSM_HALT(c1);

S1497:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1155;
  return m.FSM_HALT(c1);

S1499:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1155;
  return m.FSM_HALT(c1);

S1501:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1155;
  return m.FSM_HALT(c1);

S1503:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1505:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1507:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S807;
  return m.FSM_HALT(c1);

S1509:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S972;
  return m.FSM_HALT(c1);

S1511:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S972;
  return m.FSM_HALT(c1);

S1513:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S972;
  return m.FSM_HALT(c1);

S1515:
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S1541;
  return m.FSM_HALT(c1);

S1517:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == 'd') goto S1543;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S1541:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S1567;
  return m.FSM_HALT(c1);

S1543:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S683;
  if (241 <= c1 && c1 <= 243) goto S681;
  if (c1 == 240) goto S679;
  if (238 <= c1 && c1 <= 239) goto S677;
  if (c1 == 237) goto S675;
  if (225 <= c1 && c1 <= 236) goto S673;
  if (c1 == 224) goto S671;
  if (194 <= c1 && c1 <= 223) goto S669;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '}') goto S657;
  if (c1 == '{') goto S657;
  if (c1 == 'e') goto S1569;
  if (c1 == '`') goto S657;
  if (c1 == '\\') goto S685;
  if ('[' <= c1 && c1 <= ']') goto S657;
  if (c1 == ';') goto S657;
  if (c1 == ':') goto S633;
  if (c1 == ',') goto S657;
  if ('(' <= c1 && c1 <= ')') goto S657;
  if (c1 == ' ') goto S720;
  if (c1 == '\n') goto S627;
  if ('\t' <= c1 && c1 <= '\r') goto S720;
  if (0 <= c1 && c1 <= 127) goto S697;
  return m.FSM_HALT(c1);

S1567:
  c1 = m.FSM_CHAR();
  if (c1 == 'd') goto S1597;
  return m.FSM_HALT(c1);

S1569:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1686;
  if (241 <= c1 && c1 <= 243) goto S1683;
  if (c1 == 240) goto S1680;
  if (238 <= c1 && c1 <= 239) goto S1677;
  if (c1 == 237) goto S1674;
  if (225 <= c1 && c1 <= 236) goto S1671;
  if (c1 == 224) goto S1668;
  if (194 <= c1 && c1 <= 223) goto S1665;
  if (128 <= c1) goto S1635;
  if (c1 == '}') goto S1653;
  if (c1 == '{') goto S1653;
  if (c1 == 's') goto S1569;
  if (c1 == 'p') goto S1569;
  if (c1 == 'e') goto S1569;
  if (c1 == 'c') goto S1569;
  if (c1 == 'a') goto S1569;
  if (c1 == '`') goto S1653;
  if (c1 == '\\') goto S1689;
  if ('[' <= c1 && c1 <= ']') goto S1653;
  if (c1 == ';') goto S1653;
  if (c1 == ':') goto S1606;
  if (c1 == ',') goto S1653;
  if ('(' <= c1 && c1 <= ')') goto S1653;
  if (c1 == ' ') goto S1637;
  if (c1 == '\n') goto S1599;
  if ('\t' <= c1 && c1 <= '\r') goto S1637;
  if (0 <= c1 && c1 <= 127) goto S1701;
  return m.FSM_HALT(c1);

S1597:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S1724;
  return m.FSM_HALT(c1);

S1599:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if (m.FSM_META_BOL()) {
    m.FSM_TAKE(8, c1);
  }
  if (c1 == '^') goto S556;
  if (c1 == ':') goto S1028;
  if (c1 == ' ') goto S556;
  if ('\t' <= c1 && c1 <= '\r') goto S556;
  return m.FSM_HALT(c1);

S1606:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1686;
  if (241 <= c1 && c1 <= 243) goto S1683;
  if (c1 == 240) goto S1680;
  if (238 <= c1 && c1 <= 239) goto S1677;
  if (c1 == 237) goto S1674;
  if (225 <= c1 && c1 <= 236) goto S1671;
  if (c1 == 224) goto S1668;
  if (194 <= c1 && c1 <= 223) goto S1665;
  if (128 <= c1) goto S1635;
  if (c1 == '}') goto S1653;
  if (c1 == '{') goto S1653;
  if (c1 == 's') goto S1569;
  if (c1 == 'p') goto S1569;
  if (c1 == 'e') goto S1569;
  if (c1 == 'c') goto S1569;
  if (c1 == 'a') goto S1569;
  if (c1 == '`') goto S1653;
  if (c1 == '\\') goto S1689;
  if ('[' <= c1 && c1 <= ']') goto S1653;
  if (c1 == '=') goto S1734;
  if (c1 == ';') goto S1653;
  if (c1 == ':') goto S1606;
  if (c1 == ',') goto S1653;
  if ('(' <= c1 && c1 <= ')') goto S1653;
  if (c1 == ' ') goto S1637;
  if (c1 == '\n') goto S1599;
  if ('\t' <= c1 && c1 <= '\r') goto S1637;
  if (0 <= c1 && c1 <= 127) goto S1701;
  return m.FSM_HALT(c1);

S1635:
  c1 = m.FSM_CHAR();
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1637:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1793;
  if (241 <= c1 && c1 <= 243) goto S1790;
  if (c1 == 240) goto S1787;
  if (238 <= c1 && c1 <= 239) goto S1784;
  if (c1 == 237) goto S1781;
  if (225 <= c1 && c1 <= 236) goto S1778;
  if (c1 == 224) goto S1775;
  if (194 <= c1 && c1 <= 223) goto S1772;
  if (128 <= c1) goto S1635;
  if (c1 == '^') goto S1637;
  if (c1 == '\\') goto S1689;
  if (c1 == ':') goto S1759;
  if (c1 == ' ') goto S1637;
  if (c1 == '\n') goto S1599;
  if ('\t' <= c1 && c1 <= '\r') goto S1637;
  if (0 <= c1 && c1 <= 127) goto S1653;
  return m.FSM_HALT(c1);

S1653:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1793;
  if (241 <= c1 && c1 <= 243) goto S1790;
  if (c1 == 240) goto S1787;
  if (238 <= c1 && c1 <= 239) goto S1784;
  if (c1 == 237) goto S1781;
  if (225 <= c1 && c1 <= 236) goto S1778;
  if (c1 == 224) goto S1775;
  if (194 <= c1 && c1 <= 223) goto S1772;
  if (128 <= c1) goto S1635;
  if (c1 == '\\') goto S1689;
  if (c1 == '\n') goto S1796;
  if (0 <= c1 && c1 <= 127) goto S1653;
  return m.FSM_HALT(c1);

S1665:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1701;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1668:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1799;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1671:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1802;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1674:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1805;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1677:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1808;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1680:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1811;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1683:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1814;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1686:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1817;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1689:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1793;
  if (241 <= c1 && c1 <= 243) goto S1790;
  if (c1 == 240) goto S1787;
  if (238 <= c1 && c1 <= 239) goto S1784;
  if (c1 == 237) goto S1781;
  if (225 <= c1 && c1 <= 236) goto S1778;
  if (c1 == 224) goto S1775;
  if (194 <= c1 && c1 <= 223) goto S1772;
  if (128 <= c1) goto S1635;
  if (c1 == '\\') goto S1689;
  if (c1 == '\n') goto S1820;
  if (0 <= c1 && c1 <= 127) goto S1653;
  return m.FSM_HALT(c1);

S1701:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1686;
  if (241 <= c1 && c1 <= 243) goto S1683;
  if (c1 == 240) goto S1680;
  if (238 <= c1 && c1 <= 239) goto S1677;
  if (c1 == 237) goto S1674;
  if (225 <= c1 && c1 <= 236) goto S1671;
  if (c1 == 224) goto S1668;
  if (194 <= c1 && c1 <= 223) goto S1665;
  if (128 <= c1) goto S1635;
  if (c1 == '}') goto S1653;
  if (c1 == '{') goto S1653;
  if (c1 == '`') goto S1653;
  if (c1 == '\\') goto S1689;
  if ('[' <= c1 && c1 <= ']') goto S1653;
  if (c1 == ';') goto S1653;
  if (c1 == ':') goto S1834;
  if (c1 == ',') goto S1653;
  if ('(' <= c1 && c1 <= ')') goto S1653;
  if (c1 == ' ') goto S1637;
  if (c1 == '\n') goto S1599;
  if ('\t' <= c1 && c1 <= '\r') goto S1637;
  if (0 <= c1 && c1 <= 127) goto S1701;
  return m.FSM_HALT(c1);

S1724:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S1724;
  if (c1 == 'p') goto S1724;
  if (c1 == 'e') goto S1724;
  if (c1 == 'c') goto S1724;
  if (c1 == 'a') goto S1724;
  if (c1 == ':') goto S1724;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1732:
  m.FSM_TAKE(8);
  return m.FSM_HALT();

S1734:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1686;
  if (241 <= c1 && c1 <= 243) goto S1683;
  if (c1 == 240) goto S1680;
  if (238 <= c1 && c1 <= 239) goto S1677;
  if (c1 == 237) goto S1674;
  if (225 <= c1 && c1 <= 236) goto S1671;
  if (c1 == 224) goto S1668;
  if (194 <= c1 && c1 <= 223) goto S1665;
  if (128 <= c1) goto S1635;
  if (c1 == '}') goto S1653;
  if (c1 == '{') goto S1653;
  if (c1 == '`') goto S1653;
  if (c1 == '\\') goto S1689;
  if ('[' <= c1 && c1 <= ']') goto S1653;
  if (c1 == ';') goto S1653;
  if (c1 == ':') goto S1834;
  if (c1 == ',') goto S1653;
  if ('(' <= c1 && c1 <= ')') goto S1653;
  if (c1 == ' ') goto S1637;
  if (c1 == '\n') goto S1599;
  if ('\t' <= c1 && c1 <= '\r') goto S1637;
  if (0 <= c1 && c1 <= 127) goto S1701;
  return m.FSM_HALT(c1);

S1757:
  if (m.FSM_META_BOL()) {
    m.FSM_TAKE(8);
  }
  return m.FSM_HALT();

S1759:
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1793;
  if (241 <= c1 && c1 <= 243) goto S1790;
  if (c1 == 240) goto S1787;
  if (238 <= c1 && c1 <= 239) goto S1784;
  if (c1 == 237) goto S1781;
  if (225 <= c1 && c1 <= 236) goto S1778;
  if (c1 == 224) goto S1775;
  if (194 <= c1 && c1 <= 223) goto S1772;
  if (128 <= c1) goto S1635;
  if (c1 == '\\') goto S1689;
  if (c1 == '=') goto S1858;
  if (c1 == '\n') goto S1796;
  if (0 <= c1 && c1 <= 127) goto S1653;
  return m.FSM_HALT(c1);

S1772:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1653;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1775:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S1871;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1778:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1874;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1781:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S1877;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1784:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1880;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1787:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S1883;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1790:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1886;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1793:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S1889;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1796:
  m.FSM_TAKE(9);
  if (m.FSM_META_BOL()) {
    m.FSM_TAKE(8);
  }
  return m.FSM_HALT();

S1799:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1701;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1802:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1701;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1805:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1701;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1808:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1701;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1811:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1892;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1814:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1895;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1817:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1898;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1820:
  m.FSM_TAKE(9);
  c1 = m.FSM_CHAR();
  if (m.FSM_META_BOL()) {
    m.FSM_TAKE(8, c1);
  }
  if (c1 == 244) goto S1093;
  if (241 <= c1 && c1 <= 243) goto S1091;
  if (c1 == 240) goto S1089;
  if (238 <= c1 && c1 <= 239) goto S1087;
  if (c1 == 237) goto S1085;
  if (225 <= c1 && c1 <= 236) goto S1083;
  if (c1 == 224) goto S1081;
  if (194 <= c1 && c1 <= 223) goto S1079;
  if (128 <= c1) return m.FSM_HALT(c1);
  if (c1 == '\\') goto S685;
  if (c1 == '\n') goto S1077;
  if (0 <= c1 && c1 <= 127) goto S657;
  return m.FSM_HALT(c1);

S1834:
  m.FSM_TAKE(33);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1686;
  if (241 <= c1 && c1 <= 243) goto S1683;
  if (c1 == 240) goto S1680;
  if (238 <= c1 && c1 <= 239) goto S1677;
  if (c1 == 237) goto S1674;
  if (225 <= c1 && c1 <= 236) goto S1671;
  if (c1 == 224) goto S1668;
  if (194 <= c1 && c1 <= 223) goto S1665;
  if (128 <= c1) goto S1635;
  if (c1 == '}') goto S1653;
  if (c1 == '{') goto S1653;
  if (c1 == '`') goto S1653;
  if (c1 == '\\') goto S1689;
  if ('[' <= c1 && c1 <= ']') goto S1653;
  if (c1 == '=') goto S1734;
  if (c1 == ';') goto S1653;
  if (c1 == ':') goto S1834;
  if (c1 == ',') goto S1653;
  if ('(' <= c1 && c1 <= ')') goto S1653;
  if (c1 == ' ') goto S1637;
  if (c1 == '\n') goto S1599;
  if ('\t' <= c1 && c1 <= '\r') goto S1637;
  if (0 <= c1 && c1 <= 127) goto S1701;
  return m.FSM_HALT(c1);

S1858:
  m.FSM_TAKE(10);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S1793;
  if (241 <= c1 && c1 <= 243) goto S1790;
  if (c1 == 240) goto S1787;
  if (238 <= c1 && c1 <= 239) goto S1784;
  if (c1 == 237) goto S1781;
  if (225 <= c1 && c1 <= 236) goto S1778;
  if (c1 == 224) goto S1775;
  if (194 <= c1 && c1 <= 223) goto S1772;
  if (128 <= c1) goto S1635;
  if (c1 == '\\') goto S1689;
  if (c1 == '\n') goto S1796;
  if (0 <= c1 && c1 <= 127) goto S1653;
  return m.FSM_HALT(c1);

S1871:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1653;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1874:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1653;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1877:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1653;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1880:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1653;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1883:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1901;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1886:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1904;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1889:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1907;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1892:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1701;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1895:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1701;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1898:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1701;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1901:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1653;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1904:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1653;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);

S1907:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S1653;
  if (c1 == '\n') goto S1757;
  if (0 <= c1) goto S1635;
  return m.FSM_HALT(c1);
}

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_LambdaX(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S62;
  if (241 <= c1 && c1 <= 243) goto S59;
  if (c1 == 240) goto S56;
  if (238 <= c1 && c1 <= 239) goto S53;
  if (c1 == 237) goto S50;
  if (225 <= c1 && c1 <= 236) goto S47;
  if (c1 == 224) goto S44;
  if (194 <= c1 && c1 <= 223) goto S41;
  if (128 <= c1) goto S67;
  if (c1 == '}') goto S67;
  if (c1 == '{') goto S65;
  if (c1 == '`') goto S67;
  if (c1 == '^') goto S69;
  if ('[' <= c1 && c1 <= ']') goto S67;
  if (c1 == ';') goto S67;
  if ('0' <= c1 && c1 <= '9') goto S67;
  if (c1 == ',') goto S67;
  if ('(' <= c1 && c1 <= ')') goto S67;
  if (c1 == ' ') goto S90;
  if ('\t' <= c1 && c1 <= '\r') goto S90;
  if (0 <= c1 && c1 <= 127) goto S21;
  return m.FSM_HALT(c1);

S21:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S110;
  if (241 <= c1 && c1 <= 243) goto S108;
  if (c1 == 240) goto S106;
  if (238 <= c1 && c1 <= 239) goto S104;
  if (c1 == 237) goto S102;
  if (225 <= c1 && c1 <= 236) goto S100;
  if (c1 == 224) goto S98;
  if (194 <= c1 && c1 <= 223) goto S96;
  if ('~' <= c1 && c1 <= 127) goto S21;
  if (c1 == '|') goto S21;
  if ('a' <= c1 && c1 <= 'z') goto S21;
  if ('^' <= c1 && c1 <= '_') goto S21;
  if ('<' <= c1 && c1 <= 'Z') goto S21;
  if ('-' <= c1 && c1 <= ':') goto S21;
  if ('*' <= c1 && c1 <= '+') goto S21;
  if ('!' <= c1 && c1 <= '\'') goto S21;
  if (14 <= c1 && c1 <= 31) goto S21;
  if ('\t' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\b') goto S21;
  return m.FSM_HALT(c1);

S41:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S44:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S112;
  return m.FSM_HALT(c1);

S47:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S114;
  return m.FSM_HALT(c1);

S50:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S116;
  return m.FSM_HALT(c1);

S53:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S118;
  return m.FSM_HALT(c1);

S56:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S120;
  return m.FSM_HALT(c1);

S59:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S122;
  return m.FSM_HALT(c1);

S62:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S124;
  return m.FSM_HALT(c1);

S65:
  m.FSM_TAKE(2);
  return m.FSM_HALT();

S67:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S69:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S110;
  if (241 <= c1 && c1 <= 243) goto S108;
  if (c1 == 240) goto S106;
  if (238 <= c1 && c1 <= 239) goto S104;
  if (c1 == 237) goto S102;
  if (225 <= c1 && c1 <= 236) goto S100;
  if (c1 == 224) goto S98;
  if (194 <= c1 && c1 <= 223) goto S96;
  if ('~' <= c1 && c1 <= 127) goto S21;
  if (c1 == '{') goto S65;
  if ('a' <= c1 && c1 <= '|') goto S21;
  if (c1 == '_') goto S21;
  if (c1 == '^') goto S69;
  if ('<' <= c1 && c1 <= 'Z') goto S21;
  if ('-' <= c1 && c1 <= ':') goto S21;
  if ('*' <= c1 && c1 <= '+') goto S21;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S90;
  if ('\t' <= c1 && c1 <= '\r') goto S90;
  if (0 <= c1 && c1 <= '\'') goto S21;
  return m.FSM_HALT(c1);

S90:
  m.FSM_TAKE(3);
  c1 = m.FSM_CHAR();
  if (c1 == '{') goto S65;
  if (c1 == '^') goto S90;
  if (c1 == ' ') goto S90;
  if ('\t' <= c1 && c1 <= '\r') goto S90;
  return m.FSM_HALT(c1);

S96:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S98:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S126;
  return m.FSM_HALT(c1);

S100:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S128;
  return m.FSM_HALT(c1);

S102:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S130;
  return m.FSM_HALT(c1);

S104:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S132;
  return m.FSM_HALT(c1);

S106:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S134;
  return m.FSM_HALT(c1);

S108:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S136;
  return m.FSM_HALT(c1);

S110:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S138;
  return m.FSM_HALT(c1);

S112:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S114:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S116:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S118:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S120:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S140;
  return m.FSM_HALT(c1);

S122:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S142;
  return m.FSM_HALT(c1);

S124:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S144;
  return m.FSM_HALT(c1);

S126:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S128:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S130:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S132:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S134:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S146;
  return m.FSM_HALT(c1);

S136:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S148;
  return m.FSM_HALT(c1);

S138:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S150;
  return m.FSM_HALT(c1);

S140:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S142:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S144:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S146:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S148:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S150:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);
}

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_LambdaArgX(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S62;
  if (241 <= c1 && c1 <= 243) goto S59;
  if (c1 == 240) goto S56;
  if (238 <= c1 && c1 <= 239) goto S53;
  if (c1 == 237) goto S50;
  if (225 <= c1 && c1 <= 236) goto S47;
  if (c1 == 224) goto S44;
  if (194 <= c1 && c1 <= 223) goto S41;
  if (128 <= c1) goto S69;
  if (c1 == '}') goto S69;
  if (c1 == '{') goto S67;
  if (c1 == '`') goto S69;
  if (c1 == '^') goto S71;
  if ('[' <= c1 && c1 <= ']') goto S69;
  if (c1 == ';') goto S69;
  if ('0' <= c1 && c1 <= '9') goto S69;
  if (c1 == ',') goto S65;
  if ('(' <= c1 && c1 <= ')') goto S69;
  if (c1 == ' ') goto S92;
  if ('\t' <= c1 && c1 <= '\r') goto S92;
  if (0 <= c1 && c1 <= 127) goto S21;
  return m.FSM_HALT(c1);

S21:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S113;
  if (241 <= c1 && c1 <= 243) goto S111;
  if (c1 == 240) goto S109;
  if (238 <= c1 && c1 <= 239) goto S107;
  if (c1 == 237) goto S105;
  if (225 <= c1 && c1 <= 236) goto S103;
  if (c1 == 224) goto S101;
  if (194 <= c1 && c1 <= 223) goto S99;
  if ('~' <= c1 && c1 <= 127) goto S21;
  if (c1 == '|') goto S21;
  if ('a' <= c1 && c1 <= 'z') goto S21;
  if ('^' <= c1 && c1 <= '_') goto S21;
  if ('<' <= c1 && c1 <= 'Z') goto S21;
  if ('-' <= c1 && c1 <= ':') goto S21;
  if ('*' <= c1 && c1 <= '+') goto S21;
  if ('!' <= c1 && c1 <= '\'') goto S21;
  if (14 <= c1 && c1 <= 31) goto S21;
  if ('\t' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\b') goto S21;
  return m.FSM_HALT(c1);

S41:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S44:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S115;
  return m.FSM_HALT(c1);

S47:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S117;
  return m.FSM_HALT(c1);

S50:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S119;
  return m.FSM_HALT(c1);

S53:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S121;
  return m.FSM_HALT(c1);

S56:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S123;
  return m.FSM_HALT(c1);

S59:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S125;
  return m.FSM_HALT(c1);

S62:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S127;
  return m.FSM_HALT(c1);

S65:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S67:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S69:
  m.FSM_TAKE(5);
  return m.FSM_HALT();

S71:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == 244) goto S113;
  if (241 <= c1 && c1 <= 243) goto S111;
  if (c1 == 240) goto S109;
  if (238 <= c1 && c1 <= 239) goto S107;
  if (c1 == 237) goto S105;
  if (225 <= c1 && c1 <= 236) goto S103;
  if (c1 == 224) goto S101;
  if (194 <= c1 && c1 <= 223) goto S99;
  if ('~' <= c1 && c1 <= 127) goto S21;
  if (c1 == '{') goto S67;
  if ('a' <= c1 && c1 <= '|') goto S21;
  if (c1 == '_') goto S21;
  if (c1 == '^') goto S71;
  if ('<' <= c1 && c1 <= 'Z') goto S21;
  if (c1 == ',') goto S65;
  if ('*' <= c1 && c1 <= ':') goto S21;
  if ('(' <= c1) return m.FSM_HALT(c1);
  if (c1 == ' ') goto S92;
  if ('\t' <= c1 && c1 <= '\r') goto S92;
  if (0 <= c1 && c1 <= '\'') goto S21;
  return m.FSM_HALT(c1);

S92:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if (c1 == '{') goto S67;
  if (c1 == '^') goto S92;
  if (c1 == ',') goto S65;
  if (c1 == ' ') goto S92;
  if ('\t' <= c1 && c1 <= '\r') goto S92;
  return m.FSM_HALT(c1);

S99:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S101:
  c1 = m.FSM_CHAR();
  if (160 <= c1 && c1 <= 191) goto S129;
  return m.FSM_HALT(c1);

S103:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S131;
  return m.FSM_HALT(c1);

S105:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 159) goto S133;
  return m.FSM_HALT(c1);

S107:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S135;
  return m.FSM_HALT(c1);

S109:
  c1 = m.FSM_CHAR();
  if (144 <= c1 && c1 <= 191) goto S137;
  return m.FSM_HALT(c1);

S111:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S139;
  return m.FSM_HALT(c1);

S113:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 143) goto S141;
  return m.FSM_HALT(c1);

S115:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S117:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S119:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S121:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S123:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S143;
  return m.FSM_HALT(c1);

S125:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S145;
  return m.FSM_HALT(c1);

S127:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S147;
  return m.FSM_HALT(c1);

S129:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S131:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S133:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S135:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S137:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S149;
  return m.FSM_HALT(c1);

S139:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S151;
  return m.FSM_HALT(c1);

S141:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S153;
  return m.FSM_HALT(c1);

S143:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S145:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S147:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S149:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S151:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);

S153:
  c1 = m.FSM_CHAR();
  if (128 <= c1 && c1 <= 191) goto S21;
  return m.FSM_HALT(c1);
}

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_LambdaArgGuardX(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  m.FSM_TAKE(1);
  return m.FSM_HALT();
}

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_ListNX(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '(') goto S4;
  if ('\v' <= c1) goto S6;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S6;
  return m.FSM_HALT(c1);

S4:
  m.FSM_TAKE(1);
  return m.FSM_HALT();

S6:
  m.FSM_TAKE(2);
  return m.FSM_HALT();
}

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_ListDX(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '(') goto S4;
  if ('\v' <= c1) goto S6;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S6;
  return m.FSM_HALT(c1);

S4:
  m.FSM_TAKE(1);
  return m.FSM_HALT();

S6:
  m.FSM_TAKE(2);
  return m.FSM_HALT();
}

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_ListIX(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '(') goto S4;
  if ('\v' <= c1) goto S6;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S6;
  return m.FSM_HALT(c1);

S4:
  m.FSM_TAKE(1);
  return m.FSM_HALT();

S6:
  m.FSM_TAKE(2);
  return m.FSM_HALT();
}

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_ListHX(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '(') goto S4;
  if ('\v' <= c1) goto S6;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S6;
  return m.FSM_HALT(c1);

S4:
  m.FSM_TAKE(1);
  return m.FSM_HALT();

S6:
  m.FSM_TAKE(2);
  return m.FSM_HALT();
}

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_ListVX(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '(') goto S4;
  if ('\v' <= c1) goto S6;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S6;
  return m.FSM_HALT(c1);

S4:
  m.FSM_TAKE(1);
  return m.FSM_HALT();

S6:
  m.FSM_TAKE(2);
  return m.FSM_HALT();
}

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_ListArgX(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  m.FSM_TAKE(1);
  return m.FSM_HALT();
}

